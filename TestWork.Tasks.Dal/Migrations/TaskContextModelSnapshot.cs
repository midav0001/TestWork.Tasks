// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWork.Tasks.Dal.Context;

#nullable disable

namespace TestWork.Tasks.Dal.Migrations
{
    [DbContext(typeof(TaskContext))]
    partial class TaskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestWork.Tasks.Dal.Models.FileStorageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileStorages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fa47a41-01b8-47d5-8b4c-2c29cda16bb9"),
                            Name = "Test.png"
                        },
                        new
                        {
                            Id = new Guid("583c1460-501c-444f-b6ef-a1d0e6c6753a"),
                            Name = "Test2.png"
                        });
                });

            modelBuilder.Entity("TestWork.Tasks.Dal.Models.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("147fcc75-5a47-4684-a2c9-1a071d323b70"),
                            CreateDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Задача 1",
                            State = 3
                        },
                        new
                        {
                            Id = new Guid("6fa9a90e-0189-4179-83b0-30c80790a517"),
                            CreateDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Задача 2",
                            State = 2
                        },
                        new
                        {
                            Id = new Guid("e228d8f9-e2e9-4724-bed4-3222fba66ae2"),
                            CreateDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Задача 3",
                            State = 1
                        });
                });

            modelBuilder.Entity("TestWork.Tasks.Dal.Models.TaskFileStorageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FileStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileStorageId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskFileStorages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e167f406-9583-498f-905c-7acaf7c39478"),
                            FileStorageId = new Guid("9fa47a41-01b8-47d5-8b4c-2c29cda16bb9"),
                            TaskId = new Guid("147fcc75-5a47-4684-a2c9-1a071d323b70")
                        },
                        new
                        {
                            Id = new Guid("bf112e43-78aa-4ace-9f88-bfbb8edae945"),
                            FileStorageId = new Guid("583c1460-501c-444f-b6ef-a1d0e6c6753a"),
                            TaskId = new Guid("6fa9a90e-0189-4179-83b0-30c80790a517")
                        });
                });

            modelBuilder.Entity("TestWork.Tasks.Dal.Models.TaskFileStorageEntity", b =>
                {
                    b.HasOne("TestWork.Tasks.Dal.Models.FileStorageEntity", "File")
                        .WithMany("TaskFileStorages")
                        .HasForeignKey("FileStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestWork.Tasks.Dal.Models.TaskEntity", "Task")
                        .WithMany("TaskFileStorages")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TestWork.Tasks.Dal.Models.FileStorageEntity", b =>
                {
                    b.Navigation("TaskFileStorages");
                });

            modelBuilder.Entity("TestWork.Tasks.Dal.Models.TaskEntity", b =>
                {
                    b.Navigation("TaskFileStorages");
                });
#pragma warning restore 612, 618
        }
    }
}
